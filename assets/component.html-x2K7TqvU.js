import{_ as n,o as a,c as s,e as t}from"./app-A7gWX81E.js";const e={},p=t(`<h2 id="封装公共组件" tabindex="-1"><a class="header-anchor" href="#封装公共组件" aria-hidden="true">#</a> 封装公共组件</h2><h3 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么" aria-hidden="true">#</a> 为什么</h3><p>思考：</p><ul><li>React Hooks的架构，封装和复用是怎么做的？</li><li>在Component Class的时代封装是怎么做的?</li><li>JSX是函数返回的值，Hooks是副作用，封装的Hooks是？</li></ul><h3 id="依赖属性渲染的组件" tabindex="-1"><a class="header-anchor" href="#依赖属性渲染的组件" aria-hidden="true">#</a> 依赖属性渲染的组件</h3><p>有时候组件不需要有内部状态，状态完全由外部提供，这样可以进行简单封装。</p><h3 id="受控输入组件" tabindex="-1"><a class="header-anchor" href="#受控输入组件" aria-hidden="true">#</a> 受控输入组件</h3><p>有时一个组件得输入完全依赖与属性，这样得组件内部没有状态，完全受到外部的控制，这样的组件是受控组件。受控组件的优势是设计简单，缺点是增加了更新路径的长度。value的更新需要外部驱动(props.value), 而又需要从内部传出去(onChange)。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">Input</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">,</span> onChange<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  onChange<span class="token operator">:</span> <span class="token builtin">Function</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// return &lt;input onChange={onChange} value={value}&gt;</span>
  <span class="token comment">// 这样写整个input都延迟了</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">debounce</span><span class="token punctuation">(</span>onChange<span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非受控输入组件" tabindex="-1"><a class="header-anchor" href="#非受控输入组件" aria-hidden="true">#</a> 非受控输入组件</h3><p>非受控组件会维护内部状态，外部只提供初始值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">uncontrolledInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> defaultValue<span class="token punctuation">,</span> onChange<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  defaultValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  onChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaulValue<span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> defaulValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      onChange <span class="token operator">&amp;&amp;</span> <span class="token function">onChange</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onchange <span class="token operator">=</span> <span class="token punctuation">{</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="兼容受控和非受控组件" tabindex="-1"><a class="header-anchor" href="#兼容受控和非受控组件" aria-hidden="true">#</a> 兼容受控和非受控组件</h3><p>在封装组件的时候，往往需要同事支持两种行为</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","component.html.vue"]]);export{r as default};
