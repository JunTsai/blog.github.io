import{_ as n,o as s,c as a,e as t}from"./app-A7gWX81E.js";const p={},e=t(`<h2 id="hook的介绍" tabindex="-1"><a class="header-anchor" href="#hook的介绍" aria-hidden="true">#</a> Hook的介绍</h2><h3 id="两个方面去理解" tabindex="-1"><a class="header-anchor" href="#两个方面去理解" aria-hidden="true">#</a> 两个方面去理解:</h3><ul><li><strong>第一个是从它的作用:</strong><ul><li>让rect更好的拥抱函数式</li><li>更好的解决组合的问题(关注点分离)</li></ul></li><li><strong>第二个是从工作原理:</strong><ul><li>从原理上来说，react hook。既然叫做hook，那么它本身的工作原理是属于钩子。当react生命周期发生变化的时候，会触发到他们。</li></ul></li></ul><blockquote><p>钩子：一种消息通知机制 钩子的概念和作用，以及在不同场景下的应用。钩子是一种从系统外部监听系统内部变化，并与特定事件挂钩的消息通知机制。例如，Git的web hook用于在代码提交时通知HTTP请求，操作系统的钩子用于在进程创建或变动时通知杀毒软件等。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hook 出现前Class 风格</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// hook 出现后，react组件看作一个函数</span>
<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react-hook解决了什么问题" tabindex="-1"><a class="header-anchor" href="#react-hook解决了什么问题" aria-hidden="true">#</a> react hook解决了什么问题:</h3><ol><li><p>第一个是从现在这个起来看，它的组件变成了一个可以用来渲染的纯函数。那它就是一个纯的一个渲染的函数，这个叫什么呢？这个其实是<code>重新定义了react组件</code>。我们不再需要<code>关注</code>生命周期，不再需要<code>理解</code>生命周期，不再需要<code>背诵</code>生命周期。这样更接近rect中最核心的概念，这个是rect16.8提出之后最核心的概念。他认为我们的组件就是一个接收数据输入的函数。你看它从这种方式上来讲，对react组件的理解，其实是发生了变化的。</p></li><li><p>第二种就是说通过这个方式细化解决用户的痛点。这里其实是我们是在通过这个useState，它是个状态的钩子。这个状态钩子它其实是在解决状态的问题。use effect你可以看到，但effect我们叫作用，但其实它本质上它解决什么？它解决的是我们需要有一些地方在处理什么，在处理理解之外的程序。</p></li><li><p>第三个就是让用户以最小代价实现关注点分离。</p></li></ol><h3 id="hook-是什么-从原理角度分析" tabindex="-1"><a class="header-anchor" href="#hook-是什么-从原理角度分析" aria-hidden="true">#</a> hook 是什么？从原理角度分析</h3><blockquote><p>Hook本质上是一种消息机制；Hook的作用就是从系统外部监听某个系统内部的变化，并和某种特定事件挂钩。所以hook的实现是两个方面：</p><ul><li>被监听的实体在特定情况下发送消息给Hook</li><li>Hook对象收到这种消息完成某个具体的工作</li></ul></blockquote><p><code>React Hook</code>在干嘛？</p><ul><li>react某种特定状态发生变化时会通知hook，然后hook在完成某个特定行为；</li><li>例如useEffect,当react渲染的时候就会触发这个Hook，如果这个hook的依赖发生变化，就会执行这个hook上关联的函数；</li><li>而useState，是一个反向的hook，当用户设置状态变更的时候，会反向触发React的更新;</li></ul><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><ul><li><strong>useState</strong></li></ul><blockquote><p>作用： 管理状态，并当状态发生变化的时候,反向通知React重绘 通知方向： state hook -&gt; React Component -&gt; render</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// const [count, setCount] = useState(0)</span>
  <span class="token comment">// const [count, setCount] = useState&lt;number&gt;(0)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>count<span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token comment">/* x =&gt; x + 1 这种写法不存在竞争条件问题，他不是一个闭包中去读一个值 */</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：useState可以解成react之外的空间的状态，在向react内部通知的一个方式。其实是一个dispatch函数，为什么呢? 以为它其是在派发。</p><ul><li><strong>useEffect</strong></li></ul><blockquote><p>这个hook是当react的渲染的时候，这个hook的函数会根据依赖变化而发生调用。 这个方法一开始都会执行一次，可以用来做什么？当做它的一个组件的一个挂载的一个生命周期和的一个钩子来用。 不能写在if等条件语句下，原因其实是react通过它对这个组件的声明，就像声明这个组件拥有什么样的功能一样。 <code>useEffect</code>将渲染之外的事情收敛，集中管理。</p></blockquote><ul><li><strong>useRef</strong></li></ul><blockquote><p>useRef hook 是React提供的一个用于在函数组件中创建可变的引用的hook。它返回一个可变的ref对象，该对象的current属性被初始化为传入的参数。useRef主要用于在函数组件中保存持久化的值，这些值可以在多次渲染之间保持不变。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">TextInputWithFocusButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Focus the input<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 思考下面程序中：</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// x的值通过引用对象被保存了下，这个引用对象在哪里？</span>
<span class="token comment">// 在React的虚拟DOM对象上，useRef保证了什么？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useRef</code>保证如果是：</p><ol><li>相同的虚拟DOM对象（比如foo可以被多个虚拟DOM对象使用）</li><li>相同的位置的useRef(比如上面程序中x,y是不同位置的useRef) useRef帮助我们在一个闭包内缓存per instance, per location的数据。 如果想要根据某种依赖关系更新X，就需要这样做</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>current <span class="token operator">++</span>     <span class="token comment">// 更新x的逻辑</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>someDeps<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如果使用useMemo就得到简化了</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重新更新x的逻辑</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>useMemo</strong></li></ul><blockquote><p>允许我们在闭包内根据依赖缓存数据。本质是在依赖发生变化的时候，通知React具体的VirtualDOM实例更新自己内部useMemo对应的状态。 useMemo和useHook非常相似，useHook帮助函数组件在它的多次调用间同步实例数据。</p></blockquote><p>useMemo的优化及使用真实场景： 1.缓存对象(最大价值)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useMemo</span><span class="token generic class-name"><span class="token operator">&lt;</span>DragNode<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">DragNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.实现复杂的计算逻辑(微优化)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">complexComputation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">complexComputation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>利用useMemo优化,让子组件永不更新（微优化）</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ChildComponent someProp <span class="token operator">=</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>someProp<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>props<span class="token punctuation">.</span>someProp<span class="token punctuation">]</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ChildrenComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>useCallback 官方文档中</li></ul><blockquote><p><code>useCallback(fn,deps)</code> is equivalent to <code>useMemo(() =&gt; fn, deps)</code><strong>关于useMemo&amp; useCallback的总结</strong> useMemo 和 useCallback 其实是两个低频能力。总体来说，它们和useRef能力相似的，都是闭包间同步一个 per virtualdom instance per loaction 的值。类似一个静态的，基于词法作用域的缓存。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这段程序是为了防止高频setState带来的组件高频刷新，用useThrottledState 代替useState</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useThrottledState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>val <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">=&gt;</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> setVer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> setState <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      state<span class="token punctuation">.</span>current <span class="token operator">=</span> val
      <span class="token function">setVer</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> interval<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>current<span class="token punctuation">,</span> setState<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用法，这样无论调用频率如何，最终刷新频率会在每100ms一次。</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useThrottledState</span><span class="token punctuation">(</span>customData<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>useContext 这个Hook将父组件设置的上下文下发，是一种被高频使用，重要的技巧。</li></ul><blockquote><p>举个例子：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 像这样很多组件都依赖的状态就可以用context下发</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  loginStatus<span class="token operator">:</span> UserStates
   
  <span class="token keyword">public</span> <span class="token function">isLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> boolen <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">onLoginStatusChanged</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;./User&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> UserContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> UserContext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&quot;./User&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> UserContext <span class="token keyword">from</span> <span class="token string">&#39;./UserContext&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>UserContext<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>FooComponent<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FooComponent<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>UserContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">FooComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>UserContext<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span> context<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Context仅仅用于组件间共享的上下文类信息。什么是上下文类，就是系统设计中大部分组件都需要依赖的数据。</strong></p><h3 id="几个用hooks的小技巧" tabindex="-1"><a class="header-anchor" href="#几个用hooks的小技巧" aria-hidden="true">#</a> 几个用Hooks的小技巧</h3><ol><li>不能用 Hooks + 控制流</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hooks是对行为的声明，if-else是分支控制，不是声明的一部分。从理论上不应有声明在控制流之下。在React内部通过Hooks的词法顺序来区分不同的Hook。</p><ol start="2"><li>Stackoverflow</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//如果操作不慎，可能会导致StackOverflow</span>
<span class="token comment">// 下面会代码会一直刷新，无限循环。</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>s<span class="token punctuation">,</span> setS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setS</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Effect的注销 如果一个effect中监听了事件，或者发送了请求，但是有时候在事件响应，请求返回后，组件已经被销毁了，因此要注意手动注销在effect中使用的资源。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> unsub <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;some-evnt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>多状态更新 多状态更新是，到底用多个useState还是合并用一个大的呢? 没有必须用多个state还是一个对象，要看具体的场景，通常一个useState要解决一类问题。</li></ol>`,50),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","hook.html.vue"]]);export{r as default};
